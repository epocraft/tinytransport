{% extends 'admin/base.html.twig' %}

{% block head_stylesheet %}

    {{ parent() }}
    
    <!-- Cropper.js CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

{% endblock %}

{% block head_css%}

    {{ parent() }}

    <style type="text/css">

        .modal-fullscreen .modal-dialog {
            margin: 0;           /* bez okraj≈Ø */
            max-width: 100%;     /* nerestriktivn√≠ ≈°√≠≈ôka */
        }

        .modal-fullscreen .modal-content {
            height: 100vh;       /* cel√© okno */
            border: none;        /* voliteln√©, a≈• tam nen√≠ r√°meƒçek */
        }

        .modal-fullscreen .modal-body {
            overflow: hidden !important;
            margin: 0 !important;
            padding: 0 !important;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #cropper-image {
            max-width: 100%;
            max-height: 100vh;
            object-fit: contain;
            display: block;
        }

        /* Polopr≈Øhledn√© p√°sy, kter√© zv√Ωrazn√≠ okraje pro ohyb */
        .fold-overlay {
            position: absolute;
            background-color: rgba(255, 0, 0, 0.3);
            pointer-events: none; /* a≈• nep≈ôek√°≈æ√≠ p≈ôi ovl√°d√°n√≠ */
        }

    </style>

{% endblock %}

{% block body_content %}

    <h1>Upload & Crop Image (s Revert)</h1>

    {{ form_start(form, {'attr': {'id': 'upload-form'}}) }}
        
    <div class="row">
        <div class="col-6">
            <div class="row">
                <div class="col-6">
                    {{ form_row(form.width, {'attr': {'oninput': 'delayedValidation()'}}) }}
                </div>
                <div class="col-6">
                    {{ form_row(form.height, {'attr': {'oninput': 'delayedValidation()'}}) }}
                </div>
                <div class="col-12">
                    {{ form_row(form.filename, {'attr': {'onchange': 'onFileChanged()'}}) }}
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="row">
                <div class="col-12">
                    <!-- N√°hled -->
                    <div id="image-preview-container" style="display: none; margin-top: 10px;">
                        <img id="image-preview" src=""
                            alt="N√°hled obr√°zku"
                            style="max-width: 300px; max-height: 300px; border: 1px solid #ccc; padding: 5px;">
                        
                        <p><strong>Rozmƒõry origin√°lu:</strong> <span id="image-size">-</span></p>
                        <p><strong>Maxim√°ln√≠ tiskov√° velikost (300 DPI):</strong> <span id="print-size">-</span></p>
                        <p><strong>Minim√°ln√≠ po≈æadovan√© rozli≈°en√≠ (300 DPI):</strong> <span id="required-resolution">-</span></p>

                        <p id="validation-message" style="font-weight: bold;"></p>
                        <p id="validation-loader" style="display: none; color: blue;">üîÑ Validace prob√≠h√°...</p>

                        <!-- Tlaƒç√≠tko "O≈ô√≠znout" - zobraz√≠ se a≈æ po validaci origin√°lu -->
                        <button type="button" id="btn-crop" class="btn btn-primary" style="display: none;">O≈ô√≠znout</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tlaƒç√≠tka odesl√°n√≠ / revert -->
    <div style="margin-top: 20px;">
        <!-- Tlaƒç√≠tko Ulo≈æit -->
        <button class="btn btn-success" id="submit-button" disabled>Ulo≈æit</button>
        
        <!-- Tlaƒç√≠tko Revert o≈ôez (skryt√©, zobraz√≠ se a≈æ po potvrzen√©m o≈ôezu) -->
        <button type="button" id="revert-button" class="btn btn-warning" style="display: none;">
            Revert o≈ôez
        </button>
    </div>
    
    {{ form_end(form) }}

    <!-- Fullscreen Bootstrap 5 mod√°l (Crop) -->
    <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="cropperModalLabel">O≈ô√≠znout obr√°zek</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Zav≈ô√≠t"></button>
          </div>
          <div class="modal-body">
            <img id="cropper-image" src="" alt="Cropper Image">
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancel-crop">
                Zru≈°it
            </button>
            <button type="button" class="btn btn-success" id="confirm-crop">
                Pou≈æ√≠t o≈ôez
            </button>
          </div>
        </div>
      </div>
    </div>
{% endblock %}

{% block body_javascript %}
    {{ parent() }}

    <!-- Bootstrap 5 JS (z CDN) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Cropper.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

    <script>
    let validationTimeout;
    let originalFile = null;
    let originalImageBase64 = null;

    let cropper = null;
    let modalEl = null;
    let bsModal = null;

    // 5 cm ohyb + DPI
    const FOLD_MARGIN_CM = 5;
    const DPI = 300;

    // aspectRatio spoƒç√≠tan√Ω dle ≈°√≠≈ôky/v√Ω≈°ky z formul√°≈ôe
    let userAspectRatio = NaN;

    document.addEventListener("DOMContentLoaded", function() {
        modalEl = document.getElementById('cropperModal');
        bsModal = new bootstrap.Modal(modalEl, {});

        // Otev≈ôen√≠ mod√°lu => vytv√°≈ô√≠me Cropper
        modalEl.addEventListener('shown.bs.modal', function () {
            let cropperImage = document.getElementById('cropper-image');
            if (cropper) cropper.destroy();
            cropper = new Cropper(cropperImage, {
                aspectRatio: userAspectRatio, // Pou≈æijeme pomƒõr stran
                viewMode: 1,
                dragMode: 'crop',  // abychom mohli mƒõnit i velikost crop boxu? 
                                   // Nebo 'move' => pak je crop box fixn√≠, posouv√° se obr√°zek pod n√≠m
                movable: true,
                zoomable: true,
                ready() {
                    updateFoldOverlays();
                },
                crop() {
                    updateFoldOverlays();
                },
                zoom() {
                    updateFoldOverlays();
                }
            });
        });

        // Zav≈ôen√≠ mod√°lu => zniƒç√≠me cropper
        modalEl.addEventListener('hidden.bs.modal', function() {
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        });

        // Tlaƒç√≠tko "O≈ô√≠znout" => spoƒç√≠t√°me aspectRatio, otev≈ôeme mod√°l
        let btnCrop = document.getElementById('btn-crop');
        btnCrop.addEventListener('click', function() {
            let widthInput = document.querySelector("#{{ form.width.vars.id }}");
            let heightInput = document.querySelector("#{{ form.height.vars.id }}");
            let w = parseFloat(widthInput.value);
            let h = parseFloat(heightInput.value);

            if (w > 0 && h > 0) {
                userAspectRatio = w / h;
            } else {
                userAspectRatio = NaN; // fallback => libovoln√Ω pomƒõr
            }

            let cropperImage = document.getElementById('cropper-image');
            cropperImage.src = originalImageBase64;

            bsModal.show();
        });

        // Tlaƒç√≠tko Revert
        let revertButton = document.getElementById('revert-button');
        revertButton.addEventListener('click', function() {
            if (!originalFile) {
                alert("Nen√≠ ulo≈æen p≈Øvodn√≠ soubor!");
                return;
            }
            let fileInput = document.querySelector("#{{ form.filename.vars.id }}");

            let dataTransfer = new DataTransfer();
            dataTransfer.items.add(originalFile);
            fileInput.files = dataTransfer.files;

            validateImage();
        });

        // Tlaƒç√≠tko "Pou≈æ√≠t o≈ôez"
        let confirmCropBtn = document.getElementById('confirm-crop');
        confirmCropBtn.addEventListener('click', function() {
            if (!cropper) return;

            let widthInput = document.querySelector("#{{ form.width.vars.id }}");
            let heightInput = document.querySelector("#{{ form.height.vars.id }}");
            let requiredWidthPx = Math.round((widthInput.value / 2.54) * DPI);
            let requiredHeightPx = Math.round((heightInput.value / 2.54) * DPI);

            let croppedCanvas = cropper.getCroppedCanvas();
            let croppedWidth = croppedCanvas.width;
            let croppedHeight = croppedCanvas.height;

            if (croppedWidth < requiredWidthPx || croppedHeight < requiredHeightPx) {
                alert("‚ùå O≈ô√≠znut√° oblast je p≈ô√≠li≈° mal√° pro po≈æadovan√© rozmƒõry!");
                return;
            }

            croppedCanvas.toBlob(function(blob) {
                let fileInput = document.querySelector("#{{ form.filename.vars.id }}");

                let newName = "cropped-" + Date.now() + ".jpg";
                let croppedFile = new File([blob], newName, { type: "image/jpeg" });

                let dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                fileInput.files = dataTransfer.files;

                bsModal.hide();
                validateImage();
            }, 'image/jpeg', 1.0);
        });

        validateInputs();
    });

    // Overlay kolem "crop box", aby ≈°lo vidƒõt 5 cm ohyb
    function updateFoldOverlays() {
        if (!cropper) return;

        // Sma≈æeme star√© overlaye
        let oldOverlays = document.querySelectorAll('.fold-overlay');
        oldOverlays.forEach(el => el.remove());

        // Zjist√≠me data o samotn√©m "crop boxu"
        // => sou≈ôadnice boxu v r√°mci .cropper-crop-box 
        let boxData = cropper.getCropBoxData(); 
        // boxData = { left, top, width, height } v CSS px

        // Zjist√≠me re√°ln√© "mƒõ≈ô√≠tko" = kolik px v crop boxu odpov√≠d√° 1 px obr√°zku
        // Mus√≠me porovnat: boxData.width vs. re√°ln√© px -> getCroppedCanvas?
        // Jednodu≈°eji: 
        //   - zkus√≠me "natural" ≈°√≠≈ôku o≈ôezu (bez scale) vs. boxData.width

        let imageData = cropper.getImageData(); // { naturalWidth, ... } = origin
        let cropData = cropper.getData();       // { x, y, width, height } v origin px
                                               // => width, height tady je re√°ln√° velikost v px, co se vy≈ô√≠zne

        // Pokud cropData.width je X px v origin√°le, a boxData.width je Y px na obrazovce,
        // scale = Y / X
        let scaleX = (boxData.width / cropData.width) || 0; 
        let scaleY = (boxData.height / cropData.height) || 0;
        let scale = (scaleX + scaleY) / 2; // pr≈Ømƒõr, pro jistotu

        // marginPx = 5 cm => px => * scale
        let marginPx = ((FOLD_MARGIN_CM / 2.54) * DPI) * scale;

        // top overlay
        let topOverlay = createOverlayDiv(
            boxData.left,
            boxData.top,
            boxData.width,
            marginPx
        );
        // bottom overlay
        let bottomOverlay = createOverlayDiv(
            boxData.left,
            boxData.top + boxData.height - marginPx,
            boxData.width,
            marginPx
        );
        // left overlay
        let leftOverlay = createOverlayDiv(
            boxData.left,
            boxData.top + marginPx,
            marginPx,
            boxData.height - (2 * marginPx)
        );
        // right overlay
        let rightOverlay = createOverlayDiv(
            boxData.left + boxData.width - marginPx,
            boxData.top + marginPx,
            marginPx,
            boxData.height - (2 * marginPx)
        );

        // P≈ôid√°me do .cropper-container, a≈• je to nad boxem
        let containerEl = cropper.container.querySelector('.cropper-container');
        [topOverlay, bottomOverlay, leftOverlay, rightOverlay].forEach(div => {
            containerEl.appendChild(div);
        });
    }

    function createOverlayDiv(left, top, width, height) {
        let div = document.createElement('div');
        div.classList.add('fold-overlay');
        div.style.left = left + 'px';
        div.style.top = top + 'px';
        div.style.width = width + 'px';
        div.style.height = height + 'px';
        return div;
    }

    // P≈ôi nahr√°n√≠ nov√©ho souboru => reset Revert
    function onFileChanged() {
        let fileInput = document.querySelector("#{{ form.filename.vars.id }}");
        let revertButton = document.getElementById('revert-button');
        
        originalFile = null; 
        revertButton.style.display = 'none';
        
        validateInputs();
    }

    function delayedValidation() {
        clearTimeout(validationTimeout);
        validationTimeout = setTimeout(() => {
            calculateRequiredResolution();
            validateInputs();
        }, 500);
    }

    function calculateRequiredResolution() {
        let widthInput = document.querySelector("#{{ form.width.vars.id }}");
        let heightInput = document.querySelector("#{{ form.height.vars.id }}");
        let requiredResolutionText = document.getElementById('required-resolution');

        if (!widthInput.value || !heightInput.value) {
            requiredResolutionText.textContent = "-";
            return;
        }

        let requiredWidthPx = Math.round((widthInput.value / 2.54) * DPI);
        let requiredHeightPx = Math.round((heightInput.value / 2.54) * DPI);
        requiredResolutionText.textContent = requiredWidthPx + " √ó " + requiredHeightPx + " px";
    }

    function validateInputs() {
        let widthInput = document.querySelector("#{{ form.width.vars.id }}");
        let heightInput = document.querySelector("#{{ form.height.vars.id }}");
        let fileInput = document.querySelector("#{{ form.filename.vars.id }}");
        let submitButton = document.getElementById('submit-button');

        if (!widthInput.value || !heightInput.value || widthInput.value <= 0 || heightInput.value <= 0) {
            fileInput.disabled = true;
            submitButton.disabled = true;
        } else {
            fileInput.disabled = false;
        }

        if (fileInput.files.length > 0) {
            validateImage();
        }
    }

    function validateImage() {
        let widthInput = document.querySelector("#{{ form.width.vars.id }}");
        let heightInput = document.querySelector("#{{ form.height.vars.id }}");
        let fileInput = document.querySelector("#{{ form.filename.vars.id }}");

        let previewContainer = document.getElementById('image-preview-container');
        let preview = document.getElementById('image-preview');

        let imageSizeText = document.getElementById('image-size');
        let printSizeText = document.getElementById('print-size');
        let validationMessage = document.getElementById('validation-message');
        let validationLoader = document.getElementById('validation-loader');
        let submitButton = document.getElementById('submit-button');

        let cropButton = document.getElementById('btn-crop');
        let revertButton = document.getElementById('revert-button');

        cropButton.style.display = 'none';
        revertButton.style.display = 'none';

        if (!widthInput.value || !heightInput.value) {
            alert("‚ö†Ô∏è Nejprve zadejte po≈æadovan√© rozmƒõry!");
            fileInput.value = "";
            return;
        }

        if (fileInput.files && fileInput.files[0]) {
            let file = fileInput.files[0];
            if (!originalFile) {
                originalFile = file;
            }

            let formData = new FormData();
            formData.append("image", file);
            formData.append("width", widthInput.value);
            formData.append("height", heightInput.value);

            let reader = new FileReader();
            let img = new Image();

            reader.onload = function(e) {
                preview.src = e.target.result;
                previewContainer.style.display = 'block';

                img.src = e.target.result;
                img.onload = function() {
                    originalImageBase64 = e.target.result;

                    let widthPx = img.naturalWidth;
                    let heightPx = img.naturalHeight;

                    imageSizeText.textContent = widthPx + " √ó " + heightPx + " px";

                    let wcm = (widthPx / DPI) * 2.54;
                    let hcm = (heightPx / DPI) * 2.54;
                    printSizeText.textContent = wcm.toFixed(2) + " √ó " + hcm.toFixed(2) + " cm";

                    validationLoader.style.display = 'block';
                    validationMessage.textContent = "";
                    submitButton.disabled = true;

                    fetch("{{ path('app_upload_image_validate') }}", {
                        method: "POST",
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        validationLoader.style.display = 'none';
                        validationMessage.style.color = data.isValid ? "green" : "red";
                        validationMessage.textContent = data.message;
                        submitButton.disabled = !data.isValid;

                        if (data.isValid) {
                            cropButton.style.display = 'inline-block';
                        }
                        if (file !== originalFile) {
                            revertButton.style.display = 'inline-block';
                        }
                    })
                    .catch(error => {
                        console.error("Chyba p≈ôi validaci obr√°zku:", error);
                        validationLoader.style.display = 'none';
                        validationMessage.style.color = "red";
                        validationMessage.textContent = "‚ö†Ô∏è Nepoda≈ôilo se ovƒõ≈ôit kvalitu obr√°zku.";
                        submitButton.disabled = true;
                    });
                };
            };
            reader.readAsDataURL(file);
        } else {
            previewContainer.style.display = 'none';
            submitButton.disabled = true;
        }
    }
    </script>
{% endblock %}
